noSuchKeyException=there is no ressource for the key {0}
iconNotFound=Icon "{0}" not found

DESCRIPTION=A Multi Level Queue for scheduling uses a predefined number of \
levels to schedule processes. Processes get assigned to a particular level at \
insert. The processes in queues of higher level will then be executed first, \
lower level queues will be executed when all higher level queues are empty. \
Each queue is free to use its own scheduling, thus adding greater flexibility \
then merely having multiple levels in a queue.\
\n\nIn this scenario each process has a tima of arrival (process.time), and a \
number of execution timeslides (process.work). The algorithm loops until all \
processes are done. To schedule the processes the algorithm first adds all \
arriving processes to the queues, then picks the non-empty queue with the \
highest level and executes the upcoming process.\
\n\nThe first queue in this example uses First-Come-First-Serve-Scheduling \
while the second queue uses Round-Robin-Scheduling.

SOURCE_CODE=WHILE sum(proc.work) != 0\
\n   FOR process IN procList\
\n     IF process.time == time\
\n       queue = queueList[process.level]\
\n       queue.add(process)\
\n   FOR i FROM 0 TO (queueList.size - 1)\
\n     IF queueList[i].current() != null\
\n       queue = queueList[i]\
\n       BREAK\
\n   IF queue == null\ 
\n     CONTINUE\
\n   run(queue.current())\
\n   IF queue.current().work == 0\ 
\n     queue.removeCurrent()\
\n   ELSE\
\n     if(queue.useRoundRobin)\
\n       temp = queue.current()\
\n       queue.removeCurrent()\
\n       queue.add(temp)

DESC_TITLE=Animation of Multilevel Queue
DESC_1=A Multi Level Queue for scheduling uses a predefined number of levels to
DESC_2=schedule processes. Processes get assigned to a particular level at insert.
DESC_3=The processes in queues of higher level will then be executed first, lower level
DESC_4=queues will be executed when all higher level queues are empty. Each queue is
DESC_5=free to use its own scheduling, thus adding greater flexibility then merely
DESC_6=having multiple levels in a queue.
DESC_7=In this scenario each process has a tima of arrival (process.time), and a number
DESC_8=of execution timeslides (process.work). The algorithm loops until all processes
DESC_9=are done. To schedule the processes the algorithm first adds all arriving
DESC_10=processes to the queues, then picks the non-empty queue with the highest level
DESC_11=The first queue in this example uses First-Come-First-Serve-Scheduling while the
DESC_12=second queue uses Round-Robin-Scheduling.

SRC_0=WHILE sum(proc.work) != 0
SRC_1=FOR process IN procList
SRC_2=IF process.time == time
SRC_3=queue = queueList[process.level]
SRC_4=queue.add(process)
SRC_5=FOR i FROM 0 TO (queueList.size - 1)
SRC_6=IF queueList[i].current() != null
SRC_7=queue = queueList[i]
SRC_8=BREAK
SRC_9=IF queue == null
SRC_10=time++
SRC_11=CONTINUE
SRC_12=run(queue.current())
SRC_13=IF queue.current().work == 0
SRC_14=queue.removeCurrent()
SRC_15=ELSE
SRC_16=if(queue.useRoundRobin)
SRC_17=temp = queue.current()
SRC_18=queue.removeCurrent()
SRC_19=queue.add(temp)

ID=ID
QUEUE=QUEUE
WORK=WORK
TIME=TIME
CURR_TIME=Current Time:
THIS_MLQ_SCHED=This Multi-Level-Queue scheduled
TIME_SLOTS=time slots
OF_COMP_TIME_FOR=of computing time for
PROCESSES_IN=processes in
QUEUES=queues
WORK_TIME=Work Time
IDLE_TIME=Idle Time
SCHEDULING_ORDER=Scheduling Order

LEVEL=Level


